#!/usr/bin/env python3


import argparse
import sys

from rlsecure import (
    prune,
    use_store,
    install,
    check_if_installed,
)
from cimessages import Messages
from myargs import (
    my_simple_epilog,
    my_common_prog_description,
)


def main() -> int:
    prog = "rl-prune"

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        prog=prog,
        description=my_common_prog_description(prog=prog),
        epilog=my_simple_epilog(),
    )

    # ============================
    parser.add_argument(
        "--stream",
        required=False,
        help="Package stream name",
    )
    parser.add_argument(
        "--rl-store",
        required=True,
        help="Path to an existing rl-store",
    )
    parser.add_argument(
        "--purl",
        required=True,
        help="Package URL to prune (format [pkg:namespace/]<project>[</package>[<@version>]])",
    )

    parser.add_argument(
        "--message-reporter",
        choices=["teamcity", "text"],
        default="text",
        help="Processing status message format",
    )

    # ============================
    parser.add_argument(
        "--before-date",
        required=False,
        help="Remove everything matching the package URL and created before the specified timestamp (ISO-8601)",
    )
    parser.add_argument(
        "--after-date",
        required=False,
        help="Remove everything matching the package URL and created after the specified timestamp (ISO-8601)",
    )
    parser.add_argument(
        "--days-older",
        required=False,
        help="Remove everything matching the package URL and older than the specified number of days",
    )
    parser.add_argument(
        "--hours-older",
        required=False,
        help="Remove everything matching the package URL and older than the specified number of hours",
    )

    params = parser.parse_args()
    reporter = Messages.create(
        params.message_reporter,
    )

    # install rl-secure
    if not check_if_installed("rl-secure"):
        with reporter.progress_block("Installing rl-secure"):
            install(
                stream=params.stream,
            )

    # set rl-store
    use_store(
        store_path=params.rl_store,
    )

    # prune
    with reporter.progress_block("Pruning repository"):
        prune(
            purl=params.purl,
            before_date=params.before_date,
            after_date=params.after_date,
            days_older=params.days_older,
            hours_older=params.hours_older,
        )

    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
