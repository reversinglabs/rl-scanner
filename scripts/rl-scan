#!/usr/bin/env python3


import argparse
import os
import sys
import glob
from urllib.parse import (
    urlsplit,
    parse_qs,
)

import rlsecure
from cimessages import Messages
from typing import (
    List,
)


def __expand_specs(specs: str) -> str:
    files = glob.glob(specs, recursive=True)
    if len(files) > 1:
        raise RuntimeError(f'Path spec "{specs}" resolves to more than one file!')
    if len(files) < 1:
        raise RuntimeError(f'Path spec "{specs}" doesn\'t resolve to any file!')
    return files[0]


ReportFormatLIst: List[str] = [
    "cyclonedx",
    "sarif",
    "spdx",
    "rl-html",
    "rl-json",
    "rl-checks",
    "rl-cve",
    "all",
]


def main() -> int:
    reportList = ", ".join(ReportFormatLIst)
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        prog="rl-scan",
        description="ReversingLabs: rl-scan CLI (Preview)\n\n"
        "Extended product documentation is available at: https://docs.secure.software",
        epilog="Environment variables:\n"
        "  RLSECURE_ENCODED_LICENSE - Base64 encoded license file contents\n"
        "  RLSECURE_SITE_KEY        - Site activation key for licensing\n"
        "  RLSECURE_PROXY_SERVER    - Server URL for local proxy\n"
        "  RLSECURE_PROXY_PORT      - Network port for local proxy\n"
        "  RLSECURE_PROXY_USER      - User name for proxy authentication\n"
        "  RLSECURE_PROXY_PASSWORD  - Password for proxy authentication\n",
    )

    parser.add_argument(
        "--stream",
        required=False,
        help="Package stream name",
    )
    parser.add_argument(
        "--rl-store",
        required=False,
        help="Path to an existing rl-store",
    )
    parser.add_argument(
        "--purl",
        required=False,
        help="Package URL used for the scan (format [pkg:namespace/]<project></package><@version>)",
    )
    parser.add_argument(
        "--package-path",
        required=True,
        help="Path to the package file you want to scan (supports wildcards)",
    )
    parser.add_argument(
        "--replace",
        action="store_true",
        help="Replace the existing package version within the rl-store",
    )
    parser.add_argument(
        "--diff-with",
        required=False,
        help="Previously analyzed package version to compare against the selected package",
    )
    parser.add_argument(
        "--rl-level",
        required=False,
        help="Specifies the rl-level used for the selected package scanning",
    )
    parser.add_argument(
        "--report-path",
        required=True,
        help="Path to a directory where the selected reports will be saved",
    )
    parser.add_argument(
        "--report-format",
        default="all",
        help=f"A comma-separated list of report formats to generate. Supported values: {reportList}",
    )
    parser.add_argument(
        "--message-reporter",
        choices=["teamcity", "text"],
        default="text",
        help="Processing status message format",
    )

    params = parser.parse_args()

    # if custom store is specified, PURL should be provided as well and level should not be used
    if params.rl_store is not None:
        if params.purl is None:
            raise RuntimeError("--purl must be specified when using an existing rl-store")
        if params.rl_level is not None:
            raise RuntimeError("--rl-store and --rl-level parameters can't be used together")

    # if diff is performed, PURL and store should be provided as well and rl-level is not compatible
    if params.diff_with is not None:
        if params.purl is None:
            raise RuntimeError("--purl should be specified when generating a difference report")
        if params.rl_store is None:
            raise RuntimeError("--rl-store should be specified when generating a difference report")

    if params.purl is not None:
        query = parse_qs(urlsplit(params.purl).query)
        if "build" in query and "repro" in query["build"]:
            if params.rl_store is None:
                raise RuntimeError("--rl-store must be specified when generating a reproducible build report")

    # if params.report_path object exists it should be an empty directory
    if os.path.exists(params.report_path) and not (
        os.path.isdir(params.report_path) and not os.listdir(params.report_path)
    ):
        raise RuntimeError("--report-path needs to point to an empty directory!")

    reporter = Messages.create(params.message_reporter)

    if not rlsecure.check_if_installed():
        with reporter.progress_block("Installing rl-secure"):
            rlsecure.install(params.stream)

    # set rl-store
    if params.rl_store is not None:
        rlsecure.use_store(params.rl_store)
    else:
        # initialize temporary store
        with reporter.progress_block("Initializing rl-secure store"):
            rlsecure.init_store(params.rl_level)

    # process target package
    target_purl = params.purl if params.purl is not None else "project/package@target"
    path = __expand_specs(params.package_path)
    with reporter.progress_block("Scanning software package"):
        reporter.info(f"Package path: {path}")
        rlsecure.scan(target_purl, path, params.replace, params.diff_with)

    # generate report
    with reporter.progress_block("Generating report(s)"):
        result = rlsecure.generate_report(target_purl, params.report_path, params.report_format, params.diff_with)

    should_report_result = reporter.scan_result(result.passed, result.msg)
    if should_report_result:
        return 0 if result.passed else 1
    else:
        return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)
